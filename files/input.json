[
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "131-131",
        "config": "MASK_ON",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        <|mask:0|>\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "131-131",
        "config": "MASK_BEFORE",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        <|mask:0|>\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "131-131",
        "config": "MASK_AFTER",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        <|mask:0|>\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "130-130",
        "config": "MASK_ON",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        <|mask:0|>\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "130-130",
        "config": "MASK_BEFORE",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        <|mask:0|>\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "130-130",
        "config": "MASK_AFTER",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        <|mask:0|>\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "114-114",
        "config": "MASK_ON",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        <|mask:0|>\n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "114-114",
        "config": "MASK_BEFORE",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        <|mask:0|>\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "114-114",
        "config": "MASK_AFTER",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n        <|mask:0|>\n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "170-170",
        "config": "MASK_ON",
        "input": "public int getPopulationSize() {\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "169,5-171,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "170-170",
        "config": "MASK_BEFORE",
        "input": "public int getPopulationSize() {\n    <|mask:0|>\n    return populationSize;\n}\n<|mask:0|>",
        "range": "169,5-171,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "170-170",
        "config": "MASK_AFTER",
        "input": "public int getPopulationSize() {\n    return populationSize;\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "169,5-171,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "132-132",
        "config": "MASK_ON",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        <|mask:0|>\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "132-132",
        "config": "MASK_BEFORE",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        <|mask:0|>\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "132-132",
        "config": "MASK_AFTER",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n        <|mask:0|>\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "135-135",
        "config": "MASK_ON",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        <|mask:0|>\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "135-135",
        "config": "MASK_BEFORE",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        <|mask:0|>\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "135-135",
        "config": "MASK_AFTER",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        <|mask:0|>\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "137-137",
        "config": "MASK_ON",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        <|mask:0|>\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "137-137",
        "config": "MASK_BEFORE",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        <|mask:0|>\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "137-137",
        "config": "MASK_AFTER",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n        <|mask:0|>\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "136-136",
        "config": "MASK_ON",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        <|mask:0|>\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "136-136",
        "config": "MASK_BEFORE",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        <|mask:0|>\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "136-136",
        "config": "MASK_AFTER",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        <|mask:0|>\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "138-138",
        "config": "MASK_ON",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            <|mask:0|>\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "138-138",
        "config": "MASK_BEFORE",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            <|mask:0|>\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "138-138",
        "config": "MASK_AFTER",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n            <|mask:0|>\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "292-292",
        "config": "MASK_ON",
        "input": "protected double calculateNumericalVariance() {\n    <|mask:0|>\n    final double m = getNumberOfSuccesses();\n    final double n = getSampleSize();\n    return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n}\n<|mask:0|>",
        "range": "291,5-296,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "292-292",
        "config": "MASK_BEFORE",
        "input": "protected double calculateNumericalVariance() {\n    <|mask:0|>\n    final double N = getPopulationSize();\n    final double m = getNumberOfSuccesses();\n    final double n = getSampleSize();\n    return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n}\n<|mask:0|>",
        "range": "291,5-296,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "292-292",
        "config": "MASK_AFTER",
        "input": "protected double calculateNumericalVariance() {\n    final double N = getPopulationSize();\n    <|mask:0|>\n    final double m = getNumberOfSuccesses();\n    final double n = getSampleSize();\n    return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n}\n<|mask:0|>",
        "range": "291,5-296,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "293-293",
        "config": "MASK_ON",
        "input": "protected double calculateNumericalVariance() {\n    final double N = getPopulationSize();\n    <|mask:0|>\n    final double n = getSampleSize();\n    return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n}\n<|mask:0|>",
        "range": "291,5-296,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "293-293",
        "config": "MASK_BEFORE",
        "input": "protected double calculateNumericalVariance() {\n    final double N = getPopulationSize();\n    <|mask:0|>\n    final double m = getNumberOfSuccesses();\n    final double n = getSampleSize();\n    return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n}\n<|mask:0|>",
        "range": "291,5-296,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "293-293",
        "config": "MASK_AFTER",
        "input": "protected double calculateNumericalVariance() {\n    final double N = getPopulationSize();\n    final double m = getNumberOfSuccesses();\n    <|mask:0|>\n    final double n = getSampleSize();\n    return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n}\n<|mask:0|>",
        "range": "291,5-296,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "193-193",
        "config": "MASK_ON",
        "input": "public int sample() {\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "192,5-194,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "193-193",
        "config": "MASK_BEFORE",
        "input": "public int sample() {\n    <|mask:0|>\n    return inverseCumulativeProbability(random.nextDouble());\n}\n<|mask:0|>",
        "range": "192,5-194,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "193-193",
        "config": "MASK_AFTER",
        "input": "public int sample() {\n    return inverseCumulativeProbability(random.nextDouble());\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "192,5-194,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "294-294",
        "config": "MASK_ON",
        "input": "protected double calculateNumericalVariance() {\n    final double N = getPopulationSize();\n    final double m = getNumberOfSuccesses();\n    <|mask:0|>\n    return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n}\n<|mask:0|>",
        "range": "291,5-296,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "294-294",
        "config": "MASK_BEFORE",
        "input": "protected double calculateNumericalVariance() {\n    final double N = getPopulationSize();\n    final double m = getNumberOfSuccesses();\n    <|mask:0|>\n    final double n = getSampleSize();\n    return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n}\n<|mask:0|>",
        "range": "291,5-296,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "294-294",
        "config": "MASK_AFTER",
        "input": "protected double calculateNumericalVariance() {\n    final double N = getPopulationSize();\n    final double m = getNumberOfSuccesses();\n    final double n = getSampleSize();\n    <|mask:0|>\n    return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n}\n<|mask:0|>",
        "range": "291,5-296,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "295-295",
        "config": "MASK_ON",
        "input": "protected double calculateNumericalVariance() {\n    final double N = getPopulationSize();\n    final double m = getNumberOfSuccesses();\n    final double n = getSampleSize();\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "291,5-296,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "295-295",
        "config": "MASK_BEFORE",
        "input": "protected double calculateNumericalVariance() {\n    final double N = getPopulationSize();\n    final double m = getNumberOfSuccesses();\n    final double n = getSampleSize();\n    <|mask:0|>\n    return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n}\n<|mask:0|>",
        "range": "291,5-296,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "295-295",
        "config": "MASK_AFTER",
        "input": "protected double calculateNumericalVariance() {\n    final double N = getPopulationSize();\n    final double m = getNumberOfSuccesses();\n    final double n = getSampleSize();\n    return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "291,5-296,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "279-279",
        "config": "MASK_ON",
        "input": "public double getNumericalVariance() {\n    <|mask:0|>\n        numericalVariance = calculateNumericalVariance();\n        numericalVarianceIsCalculated = true;\n    }\n    return numericalVariance;\n}\n<|mask:0|>",
        "range": "278,5-284,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "279-279",
        "config": "MASK_BEFORE",
        "input": "public double getNumericalVariance() {\n    <|mask:0|>\n    if (!numericalVarianceIsCalculated) {\n        numericalVariance = calculateNumericalVariance();\n        numericalVarianceIsCalculated = true;\n    }\n    return numericalVariance;\n}\n<|mask:0|>",
        "range": "278,5-284,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "279-279",
        "config": "MASK_AFTER",
        "input": "public double getNumericalVariance() {\n    if (!numericalVarianceIsCalculated) {\n    <|mask:0|>\n        numericalVariance = calculateNumericalVariance();\n        numericalVarianceIsCalculated = true;\n    }\n    return numericalVariance;\n}\n<|mask:0|>",
        "range": "278,5-284,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "308-308",
        "config": "MASK_ON",
        "input": "public int getSupportLowerBound() {\n    <|mask:0|>\n                        getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n}\n<|mask:0|>",
        "range": "307,5-310,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "308-308",
        "config": "MASK_BEFORE",
        "input": "public int getSupportLowerBound() {\n    <|mask:0|>\n    return FastMath.max(0,\n                        getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n}\n<|mask:0|>",
        "range": "307,5-310,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "308-308",
        "config": "MASK_AFTER",
        "input": "public int getSupportLowerBound() {\n    return FastMath.max(0,\n    <|mask:0|>\n                        getSampleSize() + getNumberOfSuccesses() - getPopulationSize());\n}\n<|mask:0|>",
        "range": "307,5-310,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "142-142",
        "config": "MASK_ON",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "142-142",
        "config": "MASK_BEFORE",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    <|mask:0|>\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "142-142",
        "config": "MASK_AFTER",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "321-321",
        "config": "MASK_ON",
        "input": "public int getSupportUpperBound() {\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "320,5-322,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "321-321",
        "config": "MASK_BEFORE",
        "input": "public int getSupportUpperBound() {\n    <|mask:0|>\n    return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n}\n<|mask:0|>",
        "range": "320,5-322,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "321-321",
        "config": "MASK_AFTER",
        "input": "public int getSupportUpperBound() {\n    return FastMath.min(getNumberOfSuccesses(), getSampleSize());\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "320,5-322,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "179-179",
        "config": "MASK_ON",
        "input": "public int getSampleSize() {\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "178,5-180,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "179-179",
        "config": "MASK_BEFORE",
        "input": "public int getSampleSize() {\n    <|mask:0|>\n    return sampleSize;\n}\n<|mask:0|>",
        "range": "178,5-180,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "179-179",
        "config": "MASK_AFTER",
        "input": "public int getSampleSize() {\n    return sampleSize;\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "178,5-180,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "126-126",
        "config": "MASK_ON",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    <|mask:0|>\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "126-126",
        "config": "MASK_BEFORE",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    <|mask:0|>\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "126-126",
        "config": "MASK_AFTER",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    <|mask:0|>\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "125-125",
        "config": "MASK_ON",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    <|mask:0|>\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "125-125",
        "config": "MASK_BEFORE",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    <|mask:0|>\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "125-125",
        "config": "MASK_AFTER",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    <|mask:0|>\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "161-161",
        "config": "MASK_ON",
        "input": "public int getNumberOfSuccesses() {\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "160,5-162,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "161-161",
        "config": "MASK_BEFORE",
        "input": "public int getNumberOfSuccesses() {\n    <|mask:0|>\n    return numberOfSuccesses;\n}\n<|mask:0|>",
        "range": "160,5-162,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "161-161",
        "config": "MASK_AFTER",
        "input": "public int getNumberOfSuccesses() {\n    return numberOfSuccesses;\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "160,5-162,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "129-129",
        "config": "MASK_ON",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    <|mask:0|>\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "129-129",
        "config": "MASK_BEFORE",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    <|mask:0|>\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "129-129",
        "config": "MASK_AFTER",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n    <|mask:0|>\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "280-280",
        "config": "MASK_ON",
        "input": "public double getNumericalVariance() {\n    if (!numericalVarianceIsCalculated) {\n        <|mask:0|>\n        numericalVarianceIsCalculated = true;\n    }\n    return numericalVariance;\n}\n<|mask:0|>",
        "range": "278,5-284,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "280-280",
        "config": "MASK_BEFORE",
        "input": "public double getNumericalVariance() {\n    if (!numericalVarianceIsCalculated) {\n        <|mask:0|>\n        numericalVariance = calculateNumericalVariance();\n        numericalVarianceIsCalculated = true;\n    }\n    return numericalVariance;\n}\n<|mask:0|>",
        "range": "278,5-284,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "280-280",
        "config": "MASK_AFTER",
        "input": "public double getNumericalVariance() {\n    if (!numericalVarianceIsCalculated) {\n        numericalVariance = calculateNumericalVariance();\n        <|mask:0|>\n        numericalVarianceIsCalculated = true;\n    }\n    return numericalVariance;\n}\n<|mask:0|>",
        "range": "278,5-284,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "127-127",
        "config": "MASK_ON",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    <|mask:0|>\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "127-127",
        "config": "MASK_BEFORE",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    <|mask:0|>\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "127-127",
        "config": "MASK_AFTER",
        "input": "public int inverseCumulativeProbability(final double p) throws OutOfRangeException {\n    if (p < 0.0 || p > 1.0) {\n        throw new OutOfRangeException(p, 0, 1);\n    }\n    int lower = getSupportLowerBound();\n    if (p == 0.0) {\n        return lower;\n    }\n    if (lower == Integer.MIN_VALUE) {\n        if (checkedCumulativeProbability(lower) >= p) {\n            return lower;\n        }\n    } else {\n        lower -= 1; \n    }\n    int upper = getSupportUpperBound();\n    if (p == 1.0) {\n        return upper;\n    }\n    final double mu = getNumericalMean();\n    final double sigma = FastMath.sqrt(getNumericalVariance());\n    final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||\n    <|mask:0|>\n            Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);\n    if (chebyshevApplies) {\n        double k = FastMath.sqrt((1.0 - p) / p);\n        double tmp = mu - k * sigma;\n        if (tmp > lower) {\n            lower = ((int) Math.ceil(tmp)) - 1;\n        }\n        k = 1.0 / k;\n        tmp = mu + k * sigma;\n        if (tmp < upper) {\n            upper = ((int) Math.ceil(tmp)) - 1;\n        }\n    }\n    return solveInverseCumulativeProbability(p, lower, upper);\n}\n<|mask:0|>",
        "range": "100,5-143,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "283-283",
        "config": "MASK_ON",
        "input": "public double getNumericalVariance() {\n    if (!numericalVarianceIsCalculated) {\n        numericalVariance = calculateNumericalVariance();\n        numericalVarianceIsCalculated = true;\n    }\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "278,5-284,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "283-283",
        "config": "MASK_BEFORE",
        "input": "public double getNumericalVariance() {\n    if (!numericalVarianceIsCalculated) {\n        numericalVariance = calculateNumericalVariance();\n        numericalVarianceIsCalculated = true;\n    }\n    <|mask:0|>\n    return numericalVariance;\n}\n<|mask:0|>",
        "range": "278,5-284,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "283-283",
        "config": "MASK_AFTER",
        "input": "public double getNumericalVariance() {\n    if (!numericalVarianceIsCalculated) {\n        numericalVariance = calculateNumericalVariance();\n        numericalVarianceIsCalculated = true;\n    }\n    return numericalVariance;\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "278,5-284,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "281-281",
        "config": "MASK_ON",
        "input": "public double getNumericalVariance() {\n    if (!numericalVarianceIsCalculated) {\n        numericalVariance = calculateNumericalVariance();\n        <|mask:0|>\n    }\n    return numericalVariance;\n}\n<|mask:0|>",
        "range": "278,5-284,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "281-281",
        "config": "MASK_BEFORE",
        "input": "public double getNumericalVariance() {\n    if (!numericalVarianceIsCalculated) {\n        numericalVariance = calculateNumericalVariance();\n        <|mask:0|>\n        numericalVarianceIsCalculated = true;\n    }\n    return numericalVariance;\n}\n<|mask:0|>",
        "range": "278,5-284,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "281-281",
        "config": "MASK_AFTER",
        "input": "public double getNumericalVariance() {\n    if (!numericalVarianceIsCalculated) {\n        numericalVariance = calculateNumericalVariance();\n        numericalVarianceIsCalculated = true;\n        <|mask:0|>\n    }\n    return numericalVariance;\n}\n<|mask:0|>",
        "range": "278,5-284,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "268-268",
        "config": "MASK_ON",
        "input": "public double getNumericalMean() {\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "267,5-269,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "268-268",
        "config": "MASK_BEFORE",
        "input": "public double getNumericalMean() {\n    <|mask:0|>\n    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n}\n<|mask:0|>",
        "range": "267,5-269,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.HypergeometricDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
        "loc": "268-268",
        "config": "MASK_AFTER",
        "input": "public double getNumericalMean() {\n    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "267,5-269,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "158-158",
        "config": "MASK_ON",
        "input": "protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\n    <|mask:0|>\n        int xm = (lower + upper) / 2;\n        if (xm < lower || xm > upper) {\n            xm = lower + (upper - lower) / 2;\n        }\n        double pm = checkedCumulativeProbability(xm);\n        if (pm >= p) {\n            upper = xm;\n        } else {\n            lower = xm;\n        }\n    }\n    return upper;\n}\n<|mask:0|>",
        "range": "157,5-177,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "158-158",
        "config": "MASK_BEFORE",
        "input": "protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\n    <|mask:0|>\n    while (lower + 1 < upper) {\n        int xm = (lower + upper) / 2;\n        if (xm < lower || xm > upper) {\n            xm = lower + (upper - lower) / 2;\n        }\n        double pm = checkedCumulativeProbability(xm);\n        if (pm >= p) {\n            upper = xm;\n        } else {\n            lower = xm;\n        }\n    }\n    return upper;\n}\n<|mask:0|>",
        "range": "157,5-177,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "158-158",
        "config": "MASK_AFTER",
        "input": "protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\n    while (lower + 1 < upper) {\n    <|mask:0|>\n        int xm = (lower + upper) / 2;\n        if (xm < lower || xm > upper) {\n            xm = lower + (upper - lower) / 2;\n        }\n        double pm = checkedCumulativeProbability(xm);\n        if (pm >= p) {\n            upper = xm;\n        } else {\n            lower = xm;\n        }\n    }\n    return upper;\n}\n<|mask:0|>",
        "range": "157,5-177,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "176-176",
        "config": "MASK_ON",
        "input": "protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\n    while (lower + 1 < upper) {\n        int xm = (lower + upper) / 2;\n        if (xm < lower || xm > upper) {\n            xm = lower + (upper - lower) / 2;\n        }\n        double pm = checkedCumulativeProbability(xm);\n        if (pm >= p) {\n            upper = xm;\n        } else {\n            lower = xm;\n        }\n    }\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "157,5-177,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "176-176",
        "config": "MASK_BEFORE",
        "input": "protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\n    while (lower + 1 < upper) {\n        int xm = (lower + upper) / 2;\n        if (xm < lower || xm > upper) {\n            xm = lower + (upper - lower) / 2;\n        }\n        double pm = checkedCumulativeProbability(xm);\n        if (pm >= p) {\n            upper = xm;\n        } else {\n            lower = xm;\n        }\n    }\n    <|mask:0|>\n    return upper;\n}\n<|mask:0|>",
        "range": "157,5-177,5"
    },
    {
        "class": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "file": "/home/LAB/longyz/d4j-projs/Math-scp/math_2_buggy/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
        "loc": "176-176",
        "config": "MASK_AFTER",
        "input": "protected int solveInverseCumulativeProbability(final double p, int lower, int upper) {\n    while (lower + 1 < upper) {\n        int xm = (lower + upper) / 2;\n        if (xm < lower || xm > upper) {\n            xm = lower + (upper - lower) / 2;\n        }\n        double pm = checkedCumulativeProbability(xm);\n        if (pm >= p) {\n            upper = xm;\n        } else {\n            lower = xm;\n        }\n    }\n    return upper;\n    <|mask:0|>\n}\n<|mask:0|>",
        "range": "157,5-177,5"
    }
]